package magpie.attributes.generators;

import magpie.data.Dataset;
import magpie.utility.interfaces.Commandable;
import magpie.utility.interfaces.Options;

import java.io.Serializable;
import java.util.List;

/**
 * Base class for objects that generate attributes. These attributes are 
 * designed to be in addition to what is already generated by default.
 *
 * <h2>Available Commands</h2>
 *
 * <command><p><b>run $&lt;data&gt;</b> - Run attribute generator on a dataset</p>
 * </br><pr><i>data</i> - {@linkplain Dataset} dataset to be run</command>
 *
 * @author Logan Ward
 */
abstract public class BaseAttributeGenerator implements Serializable, Options, Commandable {
    
    /**
     * Generate new attributes for a dataset. This operation must both add the 
     * new attribute names to the dataset and new values to each entry.
     * @param data Dataset to be added to
     * @throws java.lang.Exception 
     * @see Dataset#addAttribute(java.lang.String, double[]) 
     */
    abstract public void addAttributes(Dataset data) throws Exception;
    
    /**
     * Print out description of attributes. 
     * 
     * <p><b>Implementation Notes</b></p>
     * <p>Format should look like
     * 
     * <p>[Full Name of generator]: (Number of attributes) Text description
     * of what these attributes are
     * 
     * <p>For HTML format, omit the ":".
     * 
     * @param htmlFormat Whether to print in HTML format
     * @return Description of the attributes
     */
    abstract public String printDescription(boolean htmlFormat);

    @Override
    public Object runCommand(List<Object> command) throws Exception {
        if (command.isEmpty()) {
            throw new IllegalArgumentException("Available commands: run");
        }

        // Get the command word
        String action = command.get(0).toString().toLowerCase();
        switch (action) {
            case "run": {
                // Check the arguments
                if (command.size() != 2 || !(command.get(1) instanceof Dataset)) {
                    throw new IllegalArgumentException("Usage: run $<dataset>");
                }

                // Run it
                Dataset data = (Dataset) command.get(1);
                int originalCount = data.NAttributes();
                addAttributes(data);
                System.out.format("\tGenerated %d attributes for %d entries.\n",
                        data.NAttributes() - originalCount, data.NEntries());
            }
            break;
            default:
                throw new IllegalArgumentException("No such command: " + action);
        }

        return null;
    }
}
