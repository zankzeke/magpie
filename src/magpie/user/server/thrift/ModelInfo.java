/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package magpie.user.server.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Holds all known information about a model
 * 
 * Known properties:
 *  property  : Property being model
 *  units     : Units of prediction. (Classifiers) Name of classes, ";"-delimited
 *  training  : Description of training set
 *  author    : Name/contact info of author
 *  citation  : Citation information of the model
 *  notes     : Short description of model
 *  dataType  : Type of data expected, defined by name of Magpie Dataset type
 *  modelType : Type of model
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-5-27")
public class ModelInfo implements org.apache.thrift.TBase<ModelInfo, ModelInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ModelInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ModelInfo");

  private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField UNITS_FIELD_DESC = new org.apache.thrift.protocol.TField("units", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("author", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TRAINING_FIELD_DESC = new org.apache.thrift.protocol.TField("training", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CITATION_FIELD_DESC = new org.apache.thrift.protocol.TField("citation", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NOTES_FIELD_DESC = new org.apache.thrift.protocol.TField("notes", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DATA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataType", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MODEL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("modelType", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ModelInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ModelInfoTupleSchemeFactory());
  }

  public String property; // required
  public String units; // required
  public String author; // required
  public String training; // required
  public String citation; // required
  public String notes; // required
  public String dataType; // required
  public String modelType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROPERTY((short)1, "property"),
    UNITS((short)2, "units"),
    AUTHOR((short)3, "author"),
    TRAINING((short)4, "training"),
    CITATION((short)5, "citation"),
    NOTES((short)6, "notes"),
    DATA_TYPE((short)7, "dataType"),
    MODEL_TYPE((short)8, "modelType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROPERTY
          return PROPERTY;
        case 2: // UNITS
          return UNITS;
        case 3: // AUTHOR
          return AUTHOR;
        case 4: // TRAINING
          return TRAINING;
        case 5: // CITATION
          return CITATION;
        case 6: // NOTES
          return NOTES;
        case 7: // DATA_TYPE
          return DATA_TYPE;
        case 8: // MODEL_TYPE
          return MODEL_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNITS, new org.apache.thrift.meta_data.FieldMetaData("units", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("author", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRAINING, new org.apache.thrift.meta_data.FieldMetaData("training", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITATION, new org.apache.thrift.meta_data.FieldMetaData("citation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTES, new org.apache.thrift.meta_data.FieldMetaData("notes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("dataType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("modelType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ModelInfo.class, metaDataMap);
  }

  public ModelInfo() {
  }

  public ModelInfo(
    String property,
    String units,
    String author,
    String training,
    String citation,
    String notes,
    String dataType,
    String modelType)
  {
    this();
    this.property = property;
    this.units = units;
    this.author = author;
    this.training = training;
    this.citation = citation;
    this.notes = notes;
    this.dataType = dataType;
    this.modelType = modelType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ModelInfo(ModelInfo other) {
    if (other.isSetProperty()) {
      this.property = other.property;
    }
    if (other.isSetUnits()) {
      this.units = other.units;
    }
    if (other.isSetAuthor()) {
      this.author = other.author;
    }
    if (other.isSetTraining()) {
      this.training = other.training;
    }
    if (other.isSetCitation()) {
      this.citation = other.citation;
    }
    if (other.isSetNotes()) {
      this.notes = other.notes;
    }
    if (other.isSetDataType()) {
      this.dataType = other.dataType;
    }
    if (other.isSetModelType()) {
      this.modelType = other.modelType;
    }
  }

  public ModelInfo deepCopy() {
    return new ModelInfo(this);
  }

  @Override
  public void clear() {
    this.property = null;
    this.units = null;
    this.author = null;
    this.training = null;
    this.citation = null;
    this.notes = null;
    this.dataType = null;
    this.modelType = null;
  }

  public String getProperty() {
    return this.property;
  }

  public ModelInfo setProperty(String property) {
    this.property = property;
    return this;
  }

  public void unsetProperty() {
    this.property = null;
  }

  /** Returns true if field property is set (has been assigned a value) and false otherwise */
  public boolean isSetProperty() {
    return this.property != null;
  }

  public void setPropertyIsSet(boolean value) {
    if (!value) {
      this.property = null;
    }
  }

  public String getUnits() {
    return this.units;
  }

  public ModelInfo setUnits(String units) {
    this.units = units;
    return this;
  }

  public void unsetUnits() {
    this.units = null;
  }

  /** Returns true if field units is set (has been assigned a value) and false otherwise */
  public boolean isSetUnits() {
    return this.units != null;
  }

  public void setUnitsIsSet(boolean value) {
    if (!value) {
      this.units = null;
    }
  }

  public String getAuthor() {
    return this.author;
  }

  public ModelInfo setAuthor(String author) {
    this.author = author;
    return this;
  }

  public void unsetAuthor() {
    this.author = null;
  }

  /** Returns true if field author is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthor() {
    return this.author != null;
  }

  public void setAuthorIsSet(boolean value) {
    if (!value) {
      this.author = null;
    }
  }

  public String getTraining() {
    return this.training;
  }

  public ModelInfo setTraining(String training) {
    this.training = training;
    return this;
  }

  public void unsetTraining() {
    this.training = null;
  }

  /** Returns true if field training is set (has been assigned a value) and false otherwise */
  public boolean isSetTraining() {
    return this.training != null;
  }

  public void setTrainingIsSet(boolean value) {
    if (!value) {
      this.training = null;
    }
  }

  public String getCitation() {
    return this.citation;
  }

  public ModelInfo setCitation(String citation) {
    this.citation = citation;
    return this;
  }

  public void unsetCitation() {
    this.citation = null;
  }

  /** Returns true if field citation is set (has been assigned a value) and false otherwise */
  public boolean isSetCitation() {
    return this.citation != null;
  }

  public void setCitationIsSet(boolean value) {
    if (!value) {
      this.citation = null;
    }
  }

  public String getNotes() {
    return this.notes;
  }

  public ModelInfo setNotes(String notes) {
    this.notes = notes;
    return this;
  }

  public void unsetNotes() {
    this.notes = null;
  }

  /** Returns true if field notes is set (has been assigned a value) and false otherwise */
  public boolean isSetNotes() {
    return this.notes != null;
  }

  public void setNotesIsSet(boolean value) {
    if (!value) {
      this.notes = null;
    }
  }

  public String getDataType() {
    return this.dataType;
  }

  public ModelInfo setDataType(String dataType) {
    this.dataType = dataType;
    return this;
  }

  public void unsetDataType() {
    this.dataType = null;
  }

  /** Returns true if field dataType is set (has been assigned a value) and false otherwise */
  public boolean isSetDataType() {
    return this.dataType != null;
  }

  public void setDataTypeIsSet(boolean value) {
    if (!value) {
      this.dataType = null;
    }
  }

  public String getModelType() {
    return this.modelType;
  }

  public ModelInfo setModelType(String modelType) {
    this.modelType = modelType;
    return this;
  }

  public void unsetModelType() {
    this.modelType = null;
  }

  /** Returns true if field modelType is set (has been assigned a value) and false otherwise */
  public boolean isSetModelType() {
    return this.modelType != null;
  }

  public void setModelTypeIsSet(boolean value) {
    if (!value) {
      this.modelType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROPERTY:
      if (value == null) {
        unsetProperty();
      } else {
        setProperty((String)value);
      }
      break;

    case UNITS:
      if (value == null) {
        unsetUnits();
      } else {
        setUnits((String)value);
      }
      break;

    case AUTHOR:
      if (value == null) {
        unsetAuthor();
      } else {
        setAuthor((String)value);
      }
      break;

    case TRAINING:
      if (value == null) {
        unsetTraining();
      } else {
        setTraining((String)value);
      }
      break;

    case CITATION:
      if (value == null) {
        unsetCitation();
      } else {
        setCitation((String)value);
      }
      break;

    case NOTES:
      if (value == null) {
        unsetNotes();
      } else {
        setNotes((String)value);
      }
      break;

    case DATA_TYPE:
      if (value == null) {
        unsetDataType();
      } else {
        setDataType((String)value);
      }
      break;

    case MODEL_TYPE:
      if (value == null) {
        unsetModelType();
      } else {
        setModelType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROPERTY:
      return getProperty();

    case UNITS:
      return getUnits();

    case AUTHOR:
      return getAuthor();

    case TRAINING:
      return getTraining();

    case CITATION:
      return getCitation();

    case NOTES:
      return getNotes();

    case DATA_TYPE:
      return getDataType();

    case MODEL_TYPE:
      return getModelType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROPERTY:
      return isSetProperty();
    case UNITS:
      return isSetUnits();
    case AUTHOR:
      return isSetAuthor();
    case TRAINING:
      return isSetTraining();
    case CITATION:
      return isSetCitation();
    case NOTES:
      return isSetNotes();
    case DATA_TYPE:
      return isSetDataType();
    case MODEL_TYPE:
      return isSetModelType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ModelInfo)
      return this.equals((ModelInfo)that);
    return false;
  }

  public boolean equals(ModelInfo that) {
    if (that == null)
      return false;

    boolean this_present_property = true && this.isSetProperty();
    boolean that_present_property = true && that.isSetProperty();
    if (this_present_property || that_present_property) {
      if (!(this_present_property && that_present_property))
        return false;
      if (!this.property.equals(that.property))
        return false;
    }

    boolean this_present_units = true && this.isSetUnits();
    boolean that_present_units = true && that.isSetUnits();
    if (this_present_units || that_present_units) {
      if (!(this_present_units && that_present_units))
        return false;
      if (!this.units.equals(that.units))
        return false;
    }

    boolean this_present_author = true && this.isSetAuthor();
    boolean that_present_author = true && that.isSetAuthor();
    if (this_present_author || that_present_author) {
      if (!(this_present_author && that_present_author))
        return false;
      if (!this.author.equals(that.author))
        return false;
    }

    boolean this_present_training = true && this.isSetTraining();
    boolean that_present_training = true && that.isSetTraining();
    if (this_present_training || that_present_training) {
      if (!(this_present_training && that_present_training))
        return false;
      if (!this.training.equals(that.training))
        return false;
    }

    boolean this_present_citation = true && this.isSetCitation();
    boolean that_present_citation = true && that.isSetCitation();
    if (this_present_citation || that_present_citation) {
      if (!(this_present_citation && that_present_citation))
        return false;
      if (!this.citation.equals(that.citation))
        return false;
    }

    boolean this_present_notes = true && this.isSetNotes();
    boolean that_present_notes = true && that.isSetNotes();
    if (this_present_notes || that_present_notes) {
      if (!(this_present_notes && that_present_notes))
        return false;
      if (!this.notes.equals(that.notes))
        return false;
    }

    boolean this_present_dataType = true && this.isSetDataType();
    boolean that_present_dataType = true && that.isSetDataType();
    if (this_present_dataType || that_present_dataType) {
      if (!(this_present_dataType && that_present_dataType))
        return false;
      if (!this.dataType.equals(that.dataType))
        return false;
    }

    boolean this_present_modelType = true && this.isSetModelType();
    boolean that_present_modelType = true && that.isSetModelType();
    if (this_present_modelType || that_present_modelType) {
      if (!(this_present_modelType && that_present_modelType))
        return false;
      if (!this.modelType.equals(that.modelType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_property = true && (isSetProperty());
    list.add(present_property);
    if (present_property)
      list.add(property);

    boolean present_units = true && (isSetUnits());
    list.add(present_units);
    if (present_units)
      list.add(units);

    boolean present_author = true && (isSetAuthor());
    list.add(present_author);
    if (present_author)
      list.add(author);

    boolean present_training = true && (isSetTraining());
    list.add(present_training);
    if (present_training)
      list.add(training);

    boolean present_citation = true && (isSetCitation());
    list.add(present_citation);
    if (present_citation)
      list.add(citation);

    boolean present_notes = true && (isSetNotes());
    list.add(present_notes);
    if (present_notes)
      list.add(notes);

    boolean present_dataType = true && (isSetDataType());
    list.add(present_dataType);
    if (present_dataType)
      list.add(dataType);

    boolean present_modelType = true && (isSetModelType());
    list.add(present_modelType);
    if (present_modelType)
      list.add(modelType);

    return list.hashCode();
  }

  @Override
  public int compareTo(ModelInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnits()).compareTo(other.isSetUnits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.units, other.units);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthor()).compareTo(other.isSetAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.author, other.author);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraining()).compareTo(other.isSetTraining());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraining()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.training, other.training);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCitation()).compareTo(other.isSetCitation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCitation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.citation, other.citation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotes()).compareTo(other.isSetNotes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notes, other.notes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataType()).compareTo(other.isSetDataType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataType, other.dataType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModelType()).compareTo(other.isSetModelType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelType, other.modelType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ModelInfo(");
    boolean first = true;

    sb.append("property:");
    if (this.property == null) {
      sb.append("null");
    } else {
      sb.append(this.property);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("units:");
    if (this.units == null) {
      sb.append("null");
    } else {
      sb.append(this.units);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("author:");
    if (this.author == null) {
      sb.append("null");
    } else {
      sb.append(this.author);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("training:");
    if (this.training == null) {
      sb.append("null");
    } else {
      sb.append(this.training);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("citation:");
    if (this.citation == null) {
      sb.append("null");
    } else {
      sb.append(this.citation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notes:");
    if (this.notes == null) {
      sb.append("null");
    } else {
      sb.append(this.notes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataType:");
    if (this.dataType == null) {
      sb.append("null");
    } else {
      sb.append(this.dataType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modelType:");
    if (this.modelType == null) {
      sb.append("null");
    } else {
      sb.append(this.modelType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ModelInfoStandardSchemeFactory implements SchemeFactory {
    public ModelInfoStandardScheme getScheme() {
      return new ModelInfoStandardScheme();
    }
  }

  private static class ModelInfoStandardScheme extends StandardScheme<ModelInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ModelInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROPERTY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.property = iprot.readString();
              struct.setPropertyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UNITS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.units = iprot.readString();
              struct.setUnitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.author = iprot.readString();
              struct.setAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TRAINING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.training = iprot.readString();
              struct.setTrainingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CITATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.citation = iprot.readString();
              struct.setCitationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NOTES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notes = iprot.readString();
              struct.setNotesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATA_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataType = iprot.readString();
              struct.setDataTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MODEL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modelType = iprot.readString();
              struct.setModelTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ModelInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.property != null) {
        oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
        oprot.writeString(struct.property);
        oprot.writeFieldEnd();
      }
      if (struct.units != null) {
        oprot.writeFieldBegin(UNITS_FIELD_DESC);
        oprot.writeString(struct.units);
        oprot.writeFieldEnd();
      }
      if (struct.author != null) {
        oprot.writeFieldBegin(AUTHOR_FIELD_DESC);
        oprot.writeString(struct.author);
        oprot.writeFieldEnd();
      }
      if (struct.training != null) {
        oprot.writeFieldBegin(TRAINING_FIELD_DESC);
        oprot.writeString(struct.training);
        oprot.writeFieldEnd();
      }
      if (struct.citation != null) {
        oprot.writeFieldBegin(CITATION_FIELD_DESC);
        oprot.writeString(struct.citation);
        oprot.writeFieldEnd();
      }
      if (struct.notes != null) {
        oprot.writeFieldBegin(NOTES_FIELD_DESC);
        oprot.writeString(struct.notes);
        oprot.writeFieldEnd();
      }
      if (struct.dataType != null) {
        oprot.writeFieldBegin(DATA_TYPE_FIELD_DESC);
        oprot.writeString(struct.dataType);
        oprot.writeFieldEnd();
      }
      if (struct.modelType != null) {
        oprot.writeFieldBegin(MODEL_TYPE_FIELD_DESC);
        oprot.writeString(struct.modelType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ModelInfoTupleSchemeFactory implements SchemeFactory {
    public ModelInfoTupleScheme getScheme() {
      return new ModelInfoTupleScheme();
    }
  }

  private static class ModelInfoTupleScheme extends TupleScheme<ModelInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ModelInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProperty()) {
        optionals.set(0);
      }
      if (struct.isSetUnits()) {
        optionals.set(1);
      }
      if (struct.isSetAuthor()) {
        optionals.set(2);
      }
      if (struct.isSetTraining()) {
        optionals.set(3);
      }
      if (struct.isSetCitation()) {
        optionals.set(4);
      }
      if (struct.isSetNotes()) {
        optionals.set(5);
      }
      if (struct.isSetDataType()) {
        optionals.set(6);
      }
      if (struct.isSetModelType()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetProperty()) {
        oprot.writeString(struct.property);
      }
      if (struct.isSetUnits()) {
        oprot.writeString(struct.units);
      }
      if (struct.isSetAuthor()) {
        oprot.writeString(struct.author);
      }
      if (struct.isSetTraining()) {
        oprot.writeString(struct.training);
      }
      if (struct.isSetCitation()) {
        oprot.writeString(struct.citation);
      }
      if (struct.isSetNotes()) {
        oprot.writeString(struct.notes);
      }
      if (struct.isSetDataType()) {
        oprot.writeString(struct.dataType);
      }
      if (struct.isSetModelType()) {
        oprot.writeString(struct.modelType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ModelInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.property = iprot.readString();
        struct.setPropertyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.units = iprot.readString();
        struct.setUnitsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.author = iprot.readString();
        struct.setAuthorIsSet(true);
      }
      if (incoming.get(3)) {
        struct.training = iprot.readString();
        struct.setTrainingIsSet(true);
      }
      if (incoming.get(4)) {
        struct.citation = iprot.readString();
        struct.setCitationIsSet(true);
      }
      if (incoming.get(5)) {
        struct.notes = iprot.readString();
        struct.setNotesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.dataType = iprot.readString();
        struct.setDataTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.modelType = iprot.readString();
        struct.setModelTypeIsSet(true);
      }
    }
  }

}

